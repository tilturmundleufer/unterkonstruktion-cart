<div class="ukc-cart" data-ukc="cart">
  <div class="ukc-cart__container">
    <div class="ukc-cart__grid">
{# BEGIN CART TWIG TEMPLATE #}

{# ===================================================== #}
{% block cart %}

{# Entfernt: Sidecart-Fixed-Buttons, die im Fullpage-Cart das Layout überlagern #}

<div id="fc-cart" {% if context == 'cart' %}class="fc-container ukc-shell"{% endif %} data-currency="EUR" data-locale="de-DE" data-context="{{ context }}">
{% import "utils.inc.twig" as utils %}
{#
    Blocks within "cart" block:
    noscript_warning
    div.row
        cart_title
        continue_shopping
    div.row
        cart_form_start
        div.col-sm-8
            cart_errors
            cart_item_divs
        div.col-sm-4
            logo
            order_totals
                address_entry*
            order_payment_actions
        cart_form_end
#}

{% block noscript_warning %}
    <noscript>
        <div id="fc-noscript-errors" class="alert alert-danger">
            <h2>{{ config.lang.cart_warning|raw }}:</h2>
            <p>{{ config.lang.cart_no_javascript_message|raw }}</p>
        </div>{# #fc-noscript-errors #}
    </noscript>
{% endblock noscript_warning %}


{# rather than doing inline control statements, we're setting some top level variables #}
{% if cart_is_fullpage %}
    {% set container_id = "fc-cart--responsive" %}
{% else %}
    {% set container_id = "fc-cart--fixed-width" %}
{% endif %}

<div id="{{ container_id }}">
    {% if context != 'checkout' %}
    <header class="fc-cart__header fc-container__row" role="banner">
        {% if not is_updateinfo %}
        <div class="fc-cart__title fc-container__grid">
            {% block cart_title %}
                <h2 class="fc-cart__title__header">{{ config.lang.cart_caption|raw }}</h2>
                <p class="fc-order-quantity">
                    {% set temp_lang_cart_items = config.lang.cart_items|raw %}
                    {% if item_count == 1 %}
                        {% set temp_lang_cart_items = config.lang.cart_item|raw %}
                    {% endif %}
                    <span data-fc-order-quantity-integer="fc-order-quantity-integer">{{ item_count }}</span>
                    <span data-fc-lang-cart-item="{{ config.lang.cart_item }}" data-fc-lang-cart-items="{{ config.lang.cart_items }}">{{ temp_lang_cart_items|lower }}</span>
                    {{ config.lang.cart_in_your_order|raw }}
                </p>
            {% endblock cart_title %}
        </div>
        {% endif %}

        {% if cart_is_fullpage or context == 'checkout' %}
        <div class="fc-cancel-continue-shopping fc-container__grid">
            {% block continue_shopping %}
            {% if cart_cancel_and_continue_link != '' %}
                <a href="{{ cart_cancel_and_continue_link }}" class="fc-button fc-button--cancel">
                    <svg class="fc-svg-icon fc-icon-small" role="presentation" title="Back Arrows">
                        <use xlink:href="#fa-angle-double-left" />
                    </svg>
                    {{ config.lang.cart_cancel_and_continue|raw }}
                </a>
            {% endif %}
            {% endblock continue_shopping %}
        </div>
        {% endif %}
    </header>
    {% endif %}

    {% if not is_updateinfo %}

    {% if cart_is_fullpage %}
    <div class="fc-cart-container fc-cart__main fc-container__row" role="main">
    {% else %}
    <div class="fc-container__row fc-cart-container">
    {% endif %}
        {% block cart_form_start %}
        {% if with_controls %}
        <form id="fc-cart-form" class="ukc-cart__grid" action="https://{{ config.store_domain }}/cart" method="post">
            {% block cart_hidden_inputs %}
            <input type="hidden" name="cart" value="update" />
            <input type="hidden" name="item_count" value="{{ items|length }}" />
            <input type="hidden" name="{{ session_name }}" value="{{ session_id }}" />
            {# Kundentyp (privat|firma) wird clientseitig aus Cookie gesetzt #}
            <input type="hidden" name="customer_type" id="ukc-customer-type-input" value="" />
            {% endblock cart_hidden_inputs %}
        {% endif %}
        {% endblock cart_form_start %}



        <div class="fc-cart__main__content fc-container__grid">
            {% if ukc_notice is defined and ukc_notice %}
            <div class="ukc-cart__notice ukc-small" aria-live="polite">{{ ukc_notice|raw }}</div>
            {% endif %}
            <div class="ukc-items">
            <div data-fc-id="block-cart-errors">
            {% block cart_errors %}
            {% if context == 'cart' %}
                {% include 'errors.inc.twig' %}

                {% if item_count == 0 %}
                    <div class="ukc-empty">
                        <div class="ukc-empty__content">
                            <p class="ukc-empty__title">Ihr Warenkorb ist leer</p>
                            <a class="ukc-btn ukc-btn--primary" href="{{ cart_cancel_and_continue_link }}">Weiter einkaufen</a>
                        </div>
                    </div>
                {% endif %}

            {% endif %}
            {% endblock cart_errors %}
            </div>

            <div data-fc-id="block-cart-items-divs">
            {% block cart_items_divs %}
            {% set checkout_sub_cancel = (context == 'checkout' and is_subscription_cancel) %}
            <div class="fc-cart__items {% if has_product_images %}fc-cart__items--with-images{% else %} fc-cart__items--without-images{% endif %}">

                {% if false and (items|length > 0) %}
                <div class="fc-cart__items__header fc-container__row">
                    <div class="fc-cart__items__header__item fc-cart__items__header__column">
                        {{ config.lang.cart_item|raw }}
                    </div>
                    <div class="fc-cart__items__header__totals fc-cart__items__header__column">
                        <div class="fc-container__row">
                            <div class="fc-cart__items__header__price">
                                {% if (item_count != items|length) %}
                                {{ config.lang.cart_price|raw }}
                                {% endif %}
                            </div>
                            <div class="fc-cart__items__header__quantity">
                                {{ config.lang.cart_quantity|raw }}
                            </div>
                            <div class="fc-cart__items__header__total">
                                {{ config.lang.cart_total|raw }}
                            </div>
                        </div>
                    </div>
                </div>
                {% endif %}


                {% for item in items %}
                {% if has_multiship and item.multiship != "-1" %}
                {# The first item per multiship shipto will != -1. All others will == -1 #}
                <div class="fc-cart__multiship-header fc-container__row">
                    <h4 class="fc-cart__multiship-header__text">
                        {{ config.lang.cart_shipto|raw }}<strong class="fc-cart__multiship-header__ship-to">{{ item.shipto }}</strong>
                    </h4>
                </div>
                {% endif %}

                {# bug in twig.js keeps us from just setting a variable. hopefully this is resolved eventually #}
                {% if has_inclusive_taxes %}{% set ukc_unit_price = item.price_each_with_tax %}{% else %}{% set ukc_unit_price = item.price_each %}{% endif %}
                <div data-fc-item-id="{{ item.id }}" class="fc-container__row fc-cart__item ukc-row {% if item.parent_code %}fc-cart__item--child-product{% elseif item.is_parent %}fc-cart__item--parent-product{% endif %} {% if loop.last %}fc-cart__item--last{% endif %}" {% if item.code != '' %}data-item-code="{{ item.code|escape('html_attr') }}" {% endif %} data-price-each="{{ ukc_unit_price }}">

                {% if loading_quantity %}
                    <div class="fc-cart__item--updating">
                        <div class="fc-spinner">
                          <div class="bounce1"></div>
                          <div class="bounce2"></div>
                          <div class="bounce3"></div>
                        </div>
                    </div>
                {% endif %}
                    <div class="fc-cart__item__details-and-image">
                        {% if has_product_images %}
                        <div class="fc-cart__item__image ukc-row__thumb">
                            {% if item.url != '' and item.image != '' %}
                            <a href="{{ item.url }}" target="_top" alt="{{ item.alt_name }}">
                            {% endif %}
                                {% if item.image %}
                                <span><img class="fc-cart__item__image__img" src="{{ item.image }}" alt="{{ item.alt_name }}" /></span>
                                {% endif %}
                            {% if item.url != '' and item.image != '' %}
                            </a>
                            {% endif %}
                        </div>
                        {% endif %}
                        <div class="fc-cart__item__details ukc-row__details">
                            <p class="fc-cart__item__name">{{ item.name }}</p>
                        {% block product_options %}
                            {# Für kompaktes Reihenlayout: Optionsliste und Meta ausgeblendet #}
                            {% set show_product_options = false %}
                            {% set show_product_weight = false %}
                            {% set show_product_category = false %}
                            {% set show_product_code = false %}
                            {% set show_sub_frequency = true %}
                            {% set show_sub_startdate = true %}
                            {% set show_sub_nextdate = true %}
                            {% set show_sub_enddate = true %}
                            {% set hidden_product_options = [] %}
                            {% if config.template_config.cart_display_config.usage != "none" %}
                                {% set show_product_options = config.template_config.cart_display_config.show_product_options %}
                                {% set show_product_weight = config.template_config.cart_display_config.show_product_weight %}
                                {% set show_product_category = config.template_config.cart_display_config.show_product_category %}
                                {% set show_product_code = config.template_config.cart_display_config.show_product_code %}
                                {% set show_sub_frequency = config.template_config.cart_display_config.show_sub_frequency %}
                                {% set show_sub_startdate = config.template_config.cart_display_config.show_sub_startdate %}
                                {% set show_sub_nextdate = config.template_config.cart_display_config.show_sub_nextdate %}
                                {% set show_sub_enddate = config.template_config.cart_display_config.show_sub_enddate %}
                                {% set hidden_product_options = config.template_config.cart_display_config.hidden_product_options %}
                            {% endif %}
                            <ul class="fc-cart__item__options">
                                {% if show_product_options %}
                                    {% for option in item.options %}
                                        {% if (option.name|lower not in hidden_product_options) and (option.class|lower not in hidden_product_options) %}
                                        <li class="fc-cart__item__option fc-cart__item__option__{{ option.class }}">
                                            <span class="fc-cart__item__option__name">{{ option.name }}</span>:
                                            <span class="fc-cart__item__option__value">{{ option.value }}</span>
                                        </li>
                                        {% endif %}
                                    {% endfor %}
                                {% endif %}

                                {% if item.code != '' and show_product_code %}
                                <li class="fc-cart__item__option--code">
                                    <span class="fc-cart__item__option__name">{{ config.lang.cart_code|raw }}</span>:
                                    <span class="fc-cart__item__option__value">{{ item.code }}</span>
                                </li>
                                {% endif %}

                                {% if item.category != 'DEFAULT' and show_product_category %}
                                <li class="fc-cart__item__option--category">
                                    <span class="fc-cart__item__option__name">{{ config.lang.cart_category|raw }}</span>:
                                    <span class="fc-cart__item__option__value">{{ item.category }}</span>
                                </li>
                                {% endif %}

                                {% if item.weight != 0 and show_product_weight %}
                                <li class="fc-cart__item__option--weight">
                                    <span class="fc-cart__item__option__name">{{ config.lang.cart_weight|raw }}</span>:
                                    <span class="fc-cart__item__option__value">{{ item.weight }} <span class="fc-cart__item__option__value__unit">{{ weight_uom }}</span></span>
                                </li>
                                {% endif %}

                                {% if false and item.sub_frequency != '' and (show_sub_frequency or show_sub_nextdate or show_sub_startdate or show_sub_enddate) %}
                                <li class="fc-cart__item__option--subscription-details">
                                    {{ config.lang.cart_subscription_details|raw }}
                                    <ul>
                                        {% if show_sub_frequency %}
                                        <li class="fc-cart__item__option--subscription-frequency">
                                            <span class="fc-cart__item__option__name">{{ config.lang.cart_frequency|raw }}</span>:
                                            <span class="fc-cart__item__option__value">{{ item.sub_frequency }}</span>
                                        </li>
                                        {% endif %}
                                        {% if show_sub_startdate %}
                                        <li class="fc-cart__item__option--subscription-startdate">
                                            <span class="fc-cart__item__option__name">{{ config.lang.cart_start_date|raw }}</span>:
                                            <span class="fc-cart__item__option__value">{{ item.sub_startdate }}</span>
                                        </li>
                                        {% endif %}
                                    {% if show_sub_nextdate and item.sub_enddate != item.sub_nextdate and (item.sub_enddate == "0000-00-00" or (item.sub_enddate != "0000-00-00" and item.sub_enddate > item.sub_nextdate)) %}
                                        <li class="fc-cart__item__option--subscription-nextdate">
                                            <span class="fc-cart__item__option__name">{{ config.lang.cart_next_date|raw }}</span>:
                                            <span class="fc-cart__item__option__value">{{ item.sub_nextdate }}</span>
                                        </li>
                                    {% endif %}
                                    {% if show_sub_enddate and item.sub_enddate != "0000-00-00" %}
                                        <li class="fc-cart__item__option--subscription-enddate">
                                            <span class="fc-cart__item__option__name">{{ config.lang.cart_end_date|raw }}</span>:
                                            <span class="fc-cart__item__option__value">{{ item.sub_enddate }}</span>
                                        </li>
                                    {% endif %}
                                    </ul>
                                </li>
                                {% endif %}
                                {# Entfernen-Action wird rechts in der Totals-Spalte dargestellt #}
                            </ul>
                        {% endblock %}
                        </div>
                    </div>

                    <div class="fc-cart__item__totals">
                        <div class="fc-container__row ukc-row__actions">
                            <div class="fc-cart__item__total ukc-row__total">
                                {% if has_inclusive_taxes %}
                                    {% if item.parent_code == '' or (item.parent_code != '' and item.price_with_tax > 0) %}
                                    <p>
                                        {{ item.price_with_tax|money_format }}{% if item.price_with_tax_is_fractional %}<span title="{{ item.price_with_tax }}">…</span>{% endif %}
                                    </p>
                                    {% endif %}
                                {% else %}
                                    {% if item.parent_code == '' or (item.parent_code != '' and item.price > 0) %}
                                    <p>
                                        {{ item.price|money_format }}{% if item.price_is_fractional %}<span title="{{ item.price }}">…</span>{% endif %}
                                    </p>
                                    {% endif %}
                                {% endif %}
                            </div>

                            <div class="fc-cart__item__price ukc-row__price">
                                {% if item.quantity != 1 %}
                                <p class="fc-cart__item__price__each">
                                    {% if has_inclusive_taxes %}
                                        {{ item.price_each_with_tax|money_format }}{% if item.price_each_with_tax_is_fractional %}<span title="{{ item.price_each_with_tax }}">…</span>{% endif %}
                                    {% else %}
                                        {{ item.price_each|money_format }}{% if item.price_each_is_fractional %}<span title="{{ item.price_each }}">…</span>{% endif %}
                                    {% endif %}
                                    <small>
                                        {{ config.lang.cart_each|raw }}
                                    </small>
                                </p>
                                {% endif %}
                            </div>

                            <div class="fc-cart__item__quantity ukc-row__qty">
                                {% if context == 'receipt' %}
                                <p class="text-center">{{ item.quantity }}</p>
                                {% elseif item.parent_code == '' or (item.parent_code != '' and item.quantity_min == 0) %}
                                {% if with_controls and checkout_sub_cancel == false %}
                                <input type="hidden" id="id{{ item.item_number }}" name="id{{ item.item_number }}" value="{{ item.id }}" />
                                <!-- Menge-Label ausgeblendet -->
                                <div class="ukc-qty-control" data-fc-item-id="{{ item.id }}">
                                    <button type="button" class="ukc-qty-btn ukc-qty-minus" aria-label="-" data-fc-id="decrement-item-quantity" data-fc-item-id="{{ item.id }}">&minus;</button>
                                    <input class="fc-cart__item__quantity__input fc-form-control" type="number" name="quantity{{ item.item_number }}" id="quantity{{ item.item_number }}" min="1" value="{{ item.quantity }}" data-fc-id="item-quantity-input" data-fc-item-id="{{ item.id }}"/>
                                    <button type="button" class="ukc-qty-btn ukc-qty-plus" aria-label="+" data-fc-id="increment-item-quantity" data-fc-item-id="{{ item.id }}">+</button>
                                </div>
                                    {% else %}
                                    <p>{{ config.lang.cart_qty|raw }}: {{ item.quantity }}</p>
                                    {% endif %}
                                {% else %}
                                    <p>{{ config.lang.cart_qty|raw }}: {{ item.quantity }}</p>
                                {% endif %}
                            </div>

                            {% if with_controls and checkout_sub_cancel == false and (item.parent_code == '' or (item.parent_code != '' and item.quantity_min == 0)) %}
                            <div class="ukc-row__remove">
                                <a class="ukc-remove-btn" href="#" title="{{ config.lang.cart_remove_item }}" data-fc-id="item-remove-link" data-fc-item-id="{{ item.id }}">Entfernen</a>
                            </div>
                            {% endif %}
                        </div>
                    </div>

                </div>

                {% endfor %}
            </div>

            {% set info_string = utils.get_info_string('quantity', messages.info) %}
            {% if info_string and context != 'cart' %}
                <div class="alert">
                {{ info_string }}
                </div>
            {% endif %}

            {% endblock cart_items_divs %}
            </div>
            </div><!-- /.ukc-items -->
        </div>



        <div class="fc-sidebar fc-sidebar--cart ukc-summary">
            {% if context != 'checkout' %}
            {% block logo %}
            <div class="fc-logo">
                {% if config.store_logo_url %}
                <img id="fc-logo" class="fc-logo__image" src="{{ config.cache_path }}{{ config.store_logo_url }}" alt="{{ config.store_name }}">
                {% else %}
                <h1 id="fc-logotype" class="fc-logotype">{{ config.store_name }}</h1>
                {% endif %}
            </div>
            {% endblock logo %}
            {% endif %}

            <div data-fc-id="block-address-entry">
            {% block address_entry %}
            {% if false and context == 'checkout' and not has_multiple_addresses %}
                {% if show_address_entry %}
                <div class="fc-address-entry">
                    <h4>
                        <svg class="fc-svg-icon fc-icon-large" role="presentation">
                        {% if shipping_address.has_live_rate_shippable_products %}
                            <use xlink:href="#fa-truck" /></svg> {{ config.lang.cart_calculate_shipping|raw }}
                        {% else %}
                            <use xlink:href="#fa-bank" /></svg> {{ config.lang.cart_calculate_taxes|raw }}
                        {% endif %}
                    </h4>

                    {% include 'postal_code.inc.twig' with {'address': shipping_address} %}

                    {% if shipping_address.has_live_rate_shippable_products == false %}
                        <div class="fc-transaction__ui">
                            <button class="fc-transaction__ui__button fc-button" type="button" data-fc-id="change-address-button">
                                {{ config.lang.cart_calculate|raw }}
                            </button>
                        </div>
                    {% endif %}

                    <div data-fc-id="block-shipping-results">
                    {% block shipping_results %}
                        {% if shipping_address.loading_shipping_results %}
                            <div class="fc-spinner">
                              <div class="bounce1"></div>
                              <div class="bounce2"></div>
                              <div class="bounce3"></div>
                            </div>
                        {% endif %}
                        {{ utils.shipping_results(shipping_address, "fc-input-group--sidebar", messages.errors, config.lang) }}
                        {% set error_string = utils.get_error_string('shipping-results',messages.errors) %}
                        {% if error_string %}
                        <div class="fc-alert fc-alert--danger">
                            {{ error_string }}
                        </div>
                        {% endif %}
                    {% endblock shipping_results %}
                    </div><!-- data-fc-id="fc-shipping-results" -->
                </div><!-- .fc-address-entry -->
                {% endif %}
            {% endif %}
            {% endblock address_entry %}
            </div><!-- data-fc-id="block-address-entry" -->

            {% if context == 'checkout' %}
            <div data-fc-id="block-order-totals">
            {% block order_totals %}
            <h3 class="fc-transaction__header" data-fc-id="ukc-order-summary-header"><span>Bestellübersicht</span></h3>

            <table class="ukc-summary-table">
                <tbody>
                    <tr>
                        <td class="ukc-summary-label">Zwischensumme</td>
                        <td class="ukc-summary-value" data-ukc-subtotal>{{ total_item_price|money_format }}</td>
                    </tr>
                    <tr>
                        <td class="ukc-summary-label">Mehrwertsteuer</td>
                        <td class="ukc-summary-value" data-ukc-tax-total>
                            {% if total_tax > 0 %}{{ total_tax|money_format }}{% else %}0,00 €{% endif %}
                        </td>
                    </tr>
                    <tr>
                        <td class="ukc-summary-label">Lieferkosten</td>
                        <td class="ukc-summary-value" data-ukc-shipping>
                            {% if total_shipping > 0 %}{{ total_shipping|money_format }}{% else %}0,00 €{% endif %}
                        </td>
                    </tr>
                    <tr class="ukc-summary-totalrow">
                        <td class="ukc-summary-label ukc-bold">Gesamtpreis inkl. MwSt.</td>
                        <td class="ukc-summary-value ukc-bold" data-ukc-total-order>{{ total_order|money_format }}</td>
                    </tr>
                </tbody>
            </table>

            <div class="ukc-summary-sep"></div>

            <div class="ukc-hint">
                Bei den angegebenen Preisen handelt es sich um Nettobeträge. Privatkunden profitieren von 0% MwSt Gemäß §12 Abs. 3 UstG
            </div>

            {% if context == 'checkout' %}
            <ul class="fc-transaction" data-fc-id="ukc-foxy-transaction-list">


                {% if context == 'checkout' and shipping_address.has_shippable_products %}
                <li class="fc-transaction__shipping fc-transaction__section">
                    {% if context == 'cart' and not has_multiple_addresses %}
                        <div class="fc-transaction__ui">
                            <h5 class="fc-transaction__ui__header">{{ config.lang.cart_shipping_to|raw }}</h5>
                            {% if shipping_address.country and shipping_address.city and show_address_entry == false %}
                            <button data-fc-id="change-shipping-location-button" class="fc-button fc-transaction__ui__toggle" type="button">{{ config.lang.cart_change|raw }}</button>
                            {% endif %}
                        </div>
                        {% if shipping_address.country and shipping_address.city %}
                        <address class="fc-transaction__shipping-address">
                            {{ shipping_address.city }}, {{ shipping_address.region }} {{ shipping_address.postal_code }}
                            {% if config.template_config.foxycomplete.show_flags %}
                            <img src="https://cdn.foxycart.com/static/images/icons/flags/famfamfam/{{ shipping_address.country|lower }}.png" alt="{{ shipping_address.country }}">
                            {% endif %}
                        </address>
                        {% endif %}
                    {% endif %}

                    {% set shipping_service_label = config.lang.cart_shipping_and_handling|raw %}
                    {% if shipping_address.shipping_service_id != 0 and shipping_address.shipping_service_description %}
                        {% set shipping_service_label = shipping_address.shipping_service_description %}
                    {% endif %}

                    <table>
                        <tbody class="fc-subtotal--shipping">
                        <tr class="fc-subtotal--row">
                            <td class="fc-subtotal__label">{{ shipping_service_label|raw }}</td>
                            <td class="fc-subtotal__value" data-ukc-shipping>
                            {% if has_inclusive_taxes %}
                                {% set total_shipping_value = total_shipping_with_tax %}
                            {% else %}
                                {% set total_shipping_value = total_shipping %}
                            {% endif %}

                            {% if show_shipping_tbd %}
                                {{ config.lang.cart_tbd|raw }}
                            {% else %}
                                {{ total_shipping_value|money_format }}
                            {% endif %}

                            <input
                                id="total_shipping"
                                type="hidden"
                                name="total_shipping"
                                value="{{ total_shipping_value }}"
                            />
                            <input
                                id="total_future_shipping"
                                type="hidden"
                                name="total_future_shipping"
                                value="{{ total_future_shipping }}"
                            />
                            </td>
                        </tr>
                        </tbody>
                    </table>
                </li>
                {% elseif context == 'checkout' and total_shipping > 0 %}
                <li class="fc-transaction__shipping fc-transaction__section">
                    <table>
                        <tbody class="fc-subtotal--shipping">
                        <tr class="fc-subtotal--row">
                            <td class="fc-subtotal__label">{{ shipping_and_handling_label|raw }}</td>
                            <td class="fc-subtotal__value">
                                {{ total_shipping|money_format }}
                            <input
                                id="total_shipping"
                                type="hidden"
                                name="total_shipping"
                                value="{{ total_shipping }}"
                            />
                            </td>
                        </tr>
                        </tbody>
                    </table>
                </li>
                {% endif %}

                {% set enable_coupon_and_gift_cart_controls = ((has_eligible_coupons or has_eligible_gift_cards) and with_controls) %}
                {% if context == 'checkout' %}
                    {% set enable_coupon_and_gift_cart_controls = ((has_eligible_coupons or has_eligible_gift_cards) and config.template_config.custom_checkout_field_requirements.coupon_entry == 'enabled') %}
                {% endif %}
                {% if has_eligible_gift_cards and has_eligible_coupons %}
                    {% set discount_lang_string = config.lang.cart_add_coupon_and_gift_card %}
                {% elseif has_eligible_coupons %} 
                    {% set discount_lang_string = config.lang.cart_add_coupon %}
                {% elseif has_eligible_gift_cards %} 
                    {% set discount_lang_string = config.lang.cart_add_gift_card %}
                {% endif %}
                {% if not is_subscription_cancel and (enable_coupon_and_gift_cart_controls or coupons|length > 0 or gift_cards|length > 0) %}
                <li class="fc-transaction__discounts fc-transaction__section">
                    <div data-fc-id="block-coupon-entry">
                    {% block coupon_entry %}

                    <div class="fc-transaction__ui">
                        <h5 class="fc-transaction__ui__header">{{ config.lang.cart_discounts|raw }}</h5>
                        {% if enable_coupon_and_gift_cart_controls %}
                            <button class="fc-transaction__ui__toggle fc-button" type="button" data-fc-id="show-coupon-input-button">
                            {% if show_coupon_input_button %}
                                {{ config.lang.cart_hide_coupon_input|raw }}
                            {% else %}
                                {{ discount_lang_string|raw }}
                            {% endif %}
                            </button>
                        {% endif %}
                    </div>

                    {% set error_string = utils.get_error_string('coupon',messages.errors) %}
                    {% set error_string = error_string ~ utils.get_error_string('gift_card',messages.errors) %}
                    {% if enable_coupon_and_gift_cart_controls and show_coupon_input_button %}
                    <div class="fc-coupon-entry--input">
                        <input type="text"
                            name="coupon"
                            id="coupon"
                            value="{{ current_coupon_code }}"
                            class="fc-coupon-entry__input fc-form-control"
                            placeholder="{{ config.lang.cart_coupon_code }}"
                            autocomplete="off">
                        <span class="fc-input-group__button">
                            <button class="fc-button fc-coupon-entry__apply" type="button" data-fc-id="add-coupon-button">{{ config.lang.cart_apply|raw }}</button>
                        </span>
                    </div>
                    {% endif %}

                    {% if loading_coupons %}
                    <div class="fc-spinner">
                      <div class="bounce1"></div>
                      <div class="bounce2"></div>
                      <div class="bounce3"></div>
                    </div>
                    {% endif %}

                    {% if error_string %}
                    <div class="fc-alert fc-alert--warning">
                        {{ error_string|raw }}
                    </div>
                    {% endif %}

                    {% endblock coupon_entry %}
                    </div><!-- data-fc-id="block-coupon-entry" -->

                    {% if coupons|length > 0 %}
                    <table>
                        {% for key,coupon_data in coupons %}
                            {% if coupon_data is not array %}
                                {% set coupon_data = [coupon_data] %}
                            {% endif %}
                            {% set coupon_code = key %}
                            {% for i, coupon in coupon_data %}
                                <tr class="fc-subtotal--row {# if not coupon.is_applied %}fc-subtotal--row--inactive{% endif #}" data-fc-coupon-container-id="{{ coupon.id }}">
                                    <td class="fc-subtotal__label">
                                        <span class="fc-coupon__name">{{ coupon.name }}</span>:
                                        <span class="fc-coupon__code">{{ coupon_code }}</span>
                                        {% if enable_coupon_and_gift_cart_controls %}
                                        <span class="fc-action--close">
                                            <a href="https://{{ config.store_domain }}/cart?cart=remove_coupon&amp;coupon_code_id={{ coupon.id }}&amp;{{ session_name }}={{ session_id }}" title="{{ config.lang.cart_remove_coupon }}" data-fc-id="remove-coupon-link" data-fc-coupon-code-id="{{ coupon.id }}">
                                                <svg class="fc-svg-icon" title="Remove Coupon" role="presentation"><use xlink:href="#fa-times-circle" /></svg>
                                            </a>
                                        </span>
                                        {% endif %}
                                    </td>
                                    <td class="fc-subtotal__value">{{ coupon.display }}</td>
                                </tr>
                            {% endfor %}
                        {% endfor %}
                    </table>
                    {% endif %}
                    {% if gift_cards|length > 0 %}
                    <table>
                        {% for key,gift_card_data in gift_cards %}
                            {% if gift_card_data is not array %}
                                {% set gift_card_data = [gift_card_data] %}
                            {% endif %}
                            {% set gift_card_code = key %}
                            {% for i, gift_card in gift_card_data %}
                                <tr class="fc-subtotal--row" data-fc-gift-card-container-id="{{ gift_card.code_id }}">
                                    <td class="fc-subtotal__label">
                                        <span class="fc-gift-card__name">{{ gift_card.name }}</span>:
                                        <span class="fc-gift-card__code">{{ gift_card_code }}</span>
                                        {% if enable_coupon_and_gift_cart_controls %}
                                        <span class="fc-action--close">
                                            <a href="" data-fc-id="remove-gift-card-link" data-fc-gift-card-code-id="{{ gift_card.code_id }}">
                                                <svg class="fc-svg-icon" title="Remove Gift Card" role="presentation"><use xlink:href="#fa-times-circle" /></svg>
                                            </a>
                                        </span>
                                        {% endif %}
                                    </td>
                                    <td class="fc-subtotal__value">{{ gift_card.amount|money_format }}</td>
                                </tr>
                            {% endfor %}
                        {% endfor %}
                    </table>
                    {% endif %}
                </li>
                {% endif %}

                {# detaillierte Steuerauflistung ausgeblendet – wir zeigen nur Summen oben #}

                {# Gesamt inkl. Steuern unten ausgeblendet – wird oben in der Tabelle angezeigt #}
            </ul>
            {% endif %}

            {% if context == "checkout" and has_multiple_addresses and multiship_data|length > 1 %}
            <div class="fc-transaction fc-transaction--multiship">
                <button type="button" class="fc-button fc-transaction__ui__toggle" data-fc-id="button-toggle-multiship-details">{{ config.lang.cart_details|raw }}</button>
                {% for multiship in multiship_data %}
                <div class="fc-transaction__ui">
                    <h5 class="fc-transaction__ui__header">{{ config.lang.cart_shipto|raw }}{{ multiship.address_name }}
                        <span class="fc-transaction__ui__header__value">{{ multiship.total_price|money_format }}</span></h5>
                    {% if show_multiship_details %}
                        {% if has_inclusive_taxes %}
                            {% set m_total_item_price = multiship.total_item_with_tax_price %}
                            {% set m_total_shipping = multiship.total_shipping_with_tax_price %}
                        {% else %}
                            {% set m_total_item_price = multiship.total_item_price %}
                            {% set m_total_shipping = multiship.total_shipping %}
                        {% endif %}

                        <table>
                            <tr class="fc-subtotal--row">
                                <td class="fc-subtotal__label"> {{ config.lang.checkout_shipment_subtotal|raw }}: </td>
                                <td class="fc-subtotal__value"> {{ m_total_item_price|money_format }} </td>
                            </tr>
                            <tr class="fc-subtotal--row">
                                <td class="fc-subtotal__label"> {{ multiship.shipping_service_description|raw }}: </td>
                                <td class="fc-subtotal__value"> {{ m_total_shipping|money_format }} </td>
                            </tr>
                            <tr class="fc-subtotal--row">
                                <td class="fc-subtotal__label"> {{ config.lang.checkout_shipment_tax|raw }}: </td>
                                <td class="fc-subtotal__value"> {{ multiship.total_tax|money_format }} </td>
                            </tr>
                            <tr class="fc-subtotal--row">
                                <td class="fc-subtotal__label"> {{ config.lang.checkout_shipment_total|raw }}: </td>
                                <td class="fc-subtotal__value"> {{ multiship.total_price|money_format }} </td>
                            </tr>
                        </table>
                    {% endif %}
                </div>
                {% endfor %}

            </div>
            {% endif %}

            {% if has_future_products and not is_subscription_cancel %}
            {% block future_products %}
            <div class="fc-transaction fc-transaction--future">
                {% set has_future_subscription_details = false %}
                {% if future_subscription_totals_by_date|length > 0 and (has_future_shipping or future_coupons|length > 0 or has_future_taxes) %}
                    {% set has_future_subscription_details = true %}
                {% endif %}
                {% if (context == "cart" or context == "checkout") and has_future_subscription_details %}
                <button type="button" class="fc-button fc-transaction__ui__toggle" data-fc-id="button-toggle-future-subscription-details">{{ config.lang.cart_details|raw }}</button>
                {% endif %}
                    {% if future_subscription_totals_by_date|length > 0 %}
                    <h5 class="fc-transaction__ui__header">
                    {% if future_subscription_totals_by_date|length > 1 %}
                        {{ config.lang.cart_future_charges|raw }}
                    {% else %}
                        {{ config.lang.cart_future_charge|raw }}
                    {% endif %}
                    </h5>
                    {% endif %}
                    {% for key, subscription_item_total in future_subscription_totals_by_date %}
                        <div class="fc-transaction__ui">
                            <h5 class="fc-transaction__ui__header">{{ key|date("F jS, Y") }}
                                <span class="fc-transaction__ui__header__value">{{ subscription_item_total.total|money_format }}</span>
                            </h5>
                        {% if has_future_subscription_details and show_future_subscriptions_details %}
                            <table>
                                <tr class="fc-subtotal--row">
                                    <td class="fc-subtotal__label"> {{ config.lang.cart_subtotal|raw }}: </td>
                                    <td class="fc-subtotal__value">
                                    {% if has_inclusive_taxes %}
                                        {{ subscription_item_total.total_item_with_tax_price|money_format }}
                                    {% else %}
                                        {{ subscription_item_total.total_item_price|money_format }}
                                    {% endif %}
                                    </td>
                                </tr>
                                {% for key,coupon in future_coupons %}
                                <tr class="fc-subtotal--row fc-transaction--future__discounts">
                                    <td class="fc-subtotal__label">{{ coupon.name }}: {{ key }}</td>
                                    <td class="fc-subtotal__value">{{ coupon.display }}</td>
                                </tr>
                                {% endfor %}
                                {% if has_future_shipping %}
                                <tr class="fc-subtotal--row">
                                    <td class="fc-subtotal__label"> {{ shipping_address.future_shipping_service_description|raw }}: </td>
                                    <td class="fc-subtotal__value">
                                    {% if has_inclusive_taxes %}
                                        {{ subscription_item_total.total_shipping_with_tax_price|money_format }}
                                    {% else %}
                                        {{ subscription_item_total.total_shipping|money_format }}
                                    {% endif %}
                                    </td>
                                </tr>
                                {% endif %}
                                {% if has_future_taxes %}
                                    <tr class="fc-subtotal--row">
                                        <td class="fc-subtotal__label"> {{ config.lang.cart_tax|raw }}: </td>
                                        <td class="fc-subtotal__value"> {{ subscription_item_total.total_tax|money_format }} </td>
                                    </tr>
                                {% endif %}
                                <tr class="fc-subtotal--row">
                                    <td class="fc-subtotal__label"> {{ config.lang.cart_total|raw }}: </td>
                                    <td class="fc-subtotal__value"> {{ subscription_item_total.total|money_format }} </td>
                                </tr>
                            </table>
                        {% endif %}
                        </div>
                    {% endfor %}
            </div>
            {% endblock future_products %}
            {% endif %}
            {% endblock order_totals %}
            </div><!-- data-fc-id="block-order-totals" -->
            {% else %}
            {# Cart: nur unsere Zusammenfassung ohne Foxy-Listen/Blöcke #}
            <h3 class="fc-transaction__header" data-fc-id="ukc-order-summary-header"><span>Bestellübersicht</span></h3>
            <table class="ukc-summary-table">
                <tbody>
                    <tr>
                        <td class="ukc-summary-label">Zwischensumme</td>
                        <td class="ukc-summary-value" data-ukc-subtotal>{{ total_item_price|money_format }}</td>
                    </tr>
                    <tr>
                        <td class="ukc-summary-label">Mehrwertsteuer</td>
                        <td class="ukc-summary-value" data-ukc-tax-total>
                            {% if total_tax > 0 %}{{ total_tax|money_format }}{% else %}0,00 €{% endif %}
                        </td>
                    </tr>
                    <tr class="ukc-summary-totalrow">
                        <td class="ukc-summary-label ukc-bold">Gesamtpreis inkl. MwSt.</td>
                        <td class="ukc-summary-value ukc-bold" data-ukc-total-order>{{ total_order|money_format }}</td>
                    </tr>
                </tbody>
            </table>
            <div class="ukc-summary-sep"></div>
            <div class="ukc-hint">Bei den angegebenen Preisen handelt es sich um Nettobeträge. Privatkunden profitieren von 0% MwSt Gemäß §12 Abs. 3 UstG</div>
            {% endif %}


            {% block order_payment_actions %}
            {% if context == 'cart' %}
            <div class="fc-actions--payment">
            {% if items|length > 0 %}

                {% block order_payment_action_checkout %}
                <div class="ukc-checkout-section">
                    <label class="ukc-checkout-label">Zur Kasse</label>
                    <a class="ukc-btn ukc-btn--alt" href="https://{{ config.store_domain }}/checkout?{{ session_name }}={{ session_id }}" target="_top">Weiter zur Kasse</a>
                </div>
                {% endblock order_payment_action_checkout %}

                {# Weitere Zahlungsmethoden (optional) #}
                {% if payment_info_required and order_payment_options|length > 0 %}
                <div class="ukc-more-payments-label">Weitere Zahlungsmethoden:</div>
                <div class="ukc-payment-buttons">
                    {% for gateway in order_payment_options %}
                    <a class="ukc-btn ukc-btn--wallet ukc-btn--{{ gateway.name_dashed }}" data-fc-id="{{ gateway.name_dashed }}-link" href="https://{{ config.store_domain }}/checkout?ThisAction=checkout&amp;fc_payment_method={{ gateway.name }}&amp;{{ session_name }}={{ session_id }}{% if gateway.additional_params %}&amp;{{ gateway.additional_params }}{% endif %}" target="_top">
                        {% if gateway.name_dashed == 'google_pay' or gateway.name == 'GooglePay' %}
                            Pay with Google Pay
                        {% else %}
                            {{ gateway.name }}
                        {% endif %}
                    </a>
                    {% endfor %}
                </div>
                {% endif %}

            {% endif %}{# items|length > 0 #}
                <div class="ukc-remove-all">
                    <a class="ukc-btn" href="https://{{ config.store_domain }}/cart?cart=empty&amp;{{ session_name }}={{ session_id }}" data-fc-id="cart-empty-link">Alle Artikel entfernen</a>
                </div>
            </div>
            {% endif %}{# context == 'cart' #}
            {% endblock order_payment_actions %}
        </div>



        {% block cart_form_end %}
        {% if with_controls %}
        <script>
        (function(){
          var form = document.getElementById('fc-cart-form');
          var updating = false;
          function getLocale(){ return document.querySelector('#fc-cart')?.dataset.locale || 'de-DE'; }
          function getCurrency(){ return document.querySelector('#fc-cart')?.dataset.currency || 'EUR'; }
          function getCustomerType(){
            try{ var m = document.cookie.match(/(?:^|; )ukc_customer_type=([^;]+)/); return m ? decodeURIComponent(m[1]) : ''; }catch(_){ return ''; }
          }
          function formatMoney(num){ return new Intl.NumberFormat(getLocale(), { style: 'currency', currency: getCurrency() }).format(num); }
          function recalcSummary(){
            var subtotal = 0;
            document.querySelectorAll('.ukc-row').forEach(function(row){
              var qtyInput = row.querySelector('input[data-fc-id="item-quantity-input"]');
              var qty = parseInt(qtyInput?.value || '0', 10) || 0;
              var each = parseFloat(row.getAttribute('data-price-each') || '0') || 0;
              subtotal += each * qty;
              var totalEl = row.querySelector('.ukc-row__total p');
              if(totalEl){ totalEl.textContent = formatMoney(each * qty); }
            });
            var type = getCustomerType();
            // Derzeit 0% MwSt laut Vorgabe; bei Bedarf hier 0.19 o.ä. setzen
            var taxRate = (type === 'firma') ? 0 : 0;
            var tax = subtotal * taxRate;
            
            // Lieferkosten aus Foxy-Daten extrahieren
            var shipping = 0;
            var shippingEl = document.querySelector('[data-ukc-shipping]');
            if(shippingEl){
              var shippingText = shippingEl.textContent || '0,00 €';
              shipping = parseFloat(shippingText.replace(/[^0-9,.-]/g,'').replace('.', '').replace(',', '.')) || 0;
            }
            
            var total = subtotal + tax + shipping;
            var subEl = document.querySelector('[data-ukc-subtotal]');
            var taxEl = document.querySelector('[data-ukc-tax-total]');
            var totalEl = document.querySelector('[data-ukc-total-order]');
            if(subEl) subEl.textContent = formatMoney(subtotal);
            if(taxEl) taxEl.textContent = formatMoney(tax);
            if(totalEl) totalEl.textContent = formatMoney(total);
          }
          function findQtyInput(itemId){
            return document.querySelector('input[data-fc-id="item-quantity-input"][data-fc-item-id="'+itemId+'"]');
          }
          async function ajaxUpdate(){
            if(!form || updating) return;
            updating = true;
            try{
              var fd = new FormData(form);
              fd.set('cart','update');
              // Kundentyp aus Cookie in Hidden-Field spiegeln und mitsenden
              try{
                var cookieMatch = document.cookie.match(/(?:^|; )ukc_customer_type=([^;]+)/);
                var val = cookieMatch ? decodeURIComponent(cookieMatch[1]) : '';
                var inp = document.getElementById('ukc-customer-type-input');
                if(inp) inp.value = val;
                if(val) fd.set('customer_type', val);
              }catch(_){}
              // Sofort im UI vorrechnen, damit es flüssig wirkt
              recalcSummary();
              var res = await fetch(form.action, { method:'POST', body: fd, credentials:'include' });
              var html = await res.text();
              var doc = new DOMParser().parseFromString(html, 'text/html');
              var next = doc.querySelector('#fc-cart');
              var current = document.querySelector('#fc-cart');
              if(next && current){ 
                // Ersetze nur die Inhaltsbereiche, nicht die ganze Sidebar-Struktur
                var nextSidebar = next.querySelector('.fc-sidebar--cart.ukc-summary');
                var currSidebar = current.querySelector('.fc-sidebar--cart.ukc-summary');
                if(nextSidebar && currSidebar){
                  currSidebar.innerHTML = nextSidebar.innerHTML;
                }else{
                  current.replaceWith(next);
                }
                return; 
              }
              // Fallback: live totals/row calculation ohne kompletten Reflow
              const locale = getLocale();
              const currency = getCurrency();
              // Update subtotals/total wenn vorhanden
              const sub = doc.querySelector('[data-ukc-subtotal]');
              const totalOrder = doc.querySelector('[data-ukc-total-order]');
              const ship = doc.querySelector('[data-ukc-shipping]');
              const nextContext = next?.getAttribute('data-context');
              if(nextContext){ document.querySelectorAll('#fc-cart').forEach(function(el){ el.setAttribute('data-context', nextContext); }); }
              if(sub){ document.querySelectorAll('[data-ukc-subtotal]').forEach(function(el){ el.innerHTML = sub.innerHTML; }); }
              if(totalOrder){ document.querySelectorAll('[data-ukc-total-order]').forEach(function(el){ el.innerHTML = totalOrder.innerHTML; }); }
              // Mehrwertsteuer aus neuer Seite ziehen oder lokal berechnen wenn nicht vorhanden
              const tax = doc.querySelector('[data-ukc-tax-total]');
              if(tax){
                const el = document.querySelector('[data-ukc-tax-total]'); if(el) el.innerHTML = tax.innerHTML;
              } else {
                // Fallback: einfache Berechnung 0%/19% je nach Kundentyp (nur Anzeige)
                var type = (document.cookie.match(/(?:^|; )ukc_customer_type=([^;]+)/)||[])[1] || 'privat';
                var subtotalEl = document.querySelector('[data-ukc-subtotal]');
                var taxEl = document.querySelector('[data-ukc-tax-total]');
                var shippingEl = document.querySelector('[data-ukc-shipping]');
                var totalEl = document.querySelector('[data-ukc-total-order]');
                if(subtotalEl && taxEl && totalEl){
                  var parseMoney = function(txt){ return parseFloat(String(txt).replace(/[^0-9,.-]/g,'').replace('.', '').replace(',', '.'))||0; };
                  var formatMoney = function(num){ return new Intl.NumberFormat(locale, {style:'currency', currency}).format(num); };
                  var subtotalVal = parseMoney(subtotalEl.textContent);
                  var taxRate = (type === 'firma') ? 0 : 0; // Privatkunden aktuell 0% nach Vorgabe
                  var taxVal = subtotalVal * taxRate;
                  var shippingVal = shippingEl ? parseMoney(shippingEl.textContent) : 0;
                  taxEl.textContent = formatMoney(taxVal);
                  if(shippingEl) shippingEl.textContent = formatMoney(shippingVal);
                  totalEl.textContent = formatMoney(subtotalVal + taxVal + shippingVal);
                }
              }
              if(ship){ const el = document.querySelector('[data-ukc-shipping]'); if(el) el.innerHTML = ship.innerHTML; }

              // Falls Kontext 'cart' ist, alle Versand-Container ausblenden (Defensivmaßnahme)
              var currentContext = document.querySelector('#fc-cart')?.getAttribute('data-context');
              if(currentContext === 'cart'){
                document.querySelectorAll('.fc-transaction__shipping, [data-fc-id="button-toggle-multiship-details"], .fc-transaction__shipping-address').forEach(function(n){ n?.parentElement?.removeChild(n); });
              }
              recalcSummary();
              
              // Tax-Berechnung im Checkout triggern
              if(currentContext === 'checkout'){
                var customerTypeInput = document.getElementById('customer_type');
                if(customerTypeInput){
                  var customerType = getCustomerType();
                  customerTypeInput.value = customerType;
                  
                  // Customer Type in Foxy setzen (alle Methoden)
                  setCustomerTypeInFoxy(customerType);
                  
                  // Foxy Tax-Berechnung triggern
                  if(typeof FC !== 'undefined' && FC.checkout && FC.checkout.tax){
                    FC.checkout.tax.get_tax();
                  }
                }
              }
              
              // Bestellnummer nach AJAX-Update wiederherstellen
              setTimeout(function(){
                generatePurchaseOrderNumber();
                // Zusätzliche Sicherheit: Alle PO-Felder im DOM finden und readonly machen
                var allPOInputs = document.querySelectorAll('#purchase_order');
                allPOInputs.forEach(function(input) {
                  var storedPONumber = sessionStorage.getItem('ukc_po_number');
                  if(storedPONumber) {
                    input.value = storedPONumber;
                    setPOFieldReadonly(input);
                  }
                });
              }, 100);
            }catch(e){
              console.error('Cart update failed', e);
              if(form) form.submit();
            }finally{
              updating = false;
            }
          }
          // Kundentyp aus Cookie ermitteln
          function getCustomerType(){
            var cookies = document.cookie.split(';');
            for(var i = 0; i < cookies.length; i++){
              var cookie = cookies[i].trim();
              if(cookie.indexOf('ukc_customer_type=') === 0){
                return cookie.substring('ukc_customer_type='.length);
              }
            }
            return 'privat'; // Standard: Privatkunde
          }
          
          // Customer Type in Foxy Cart setzen
          function setCustomerTypeInFoxy(customerType) {
            if(typeof FC === 'undefined' || !FC.cart) return;
            
            // 1. Als Custom Field setzen
            FC.cart.custom_fields = FC.cart.custom_fields || [];
            FC.cart.custom_fields = FC.cart.custom_fields.filter(function(field) {
              return field.name !== 'customer_type';
            });
            FC.cart.custom_fields.push({
              name: 'customer_type',
              value: customerType
            });
            
            // 2. Als Standard-Field setzen
            FC.cart.customer_type = customerType;
            
            // 3. Als billing_company (Workaround)
            if(!FC.cart._original_billing_company) {
              FC.cart._original_billing_company = FC.cart.billing_company || '';
            }
            FC.cart.billing_company = 'CUSTOMER_TYPE:' + customerType;
            
            console.debug('Set customer_type in Foxy:', {
              customerType: customerType,
              custom_fields: FC.cart.custom_fields,
              billing_company: FC.cart.billing_company
            });
          }
          
          // Tax-Berechnung triggern wenn Kundentyp sich ändert
          function triggerTaxCalculation(){
            var currentContext = document.querySelector('#fc-cart')?.getAttribute('data-context');
            if(currentContext === 'checkout'){
              var customerTypeInput = document.getElementById('customer_type');
              if(customerTypeInput){
                var customerType = getCustomerType();
                customerTypeInput.value = customerType;
                
                // Customer Type in Foxy setzen (alle Methoden)
                setCustomerTypeInFoxy(customerType);
                
                // Foxy Tax-Berechnung triggern
                if(typeof FC !== 'undefined' && FC.checkout && FC.checkout.tax){
                  FC.checkout.tax.get_tax();
                }
              }
            }
          }
          
          // Tax-Berechnung beim Laden triggern
          triggerTaxCalculation();
          
          // Tax-Berechnung bei Cookie-Änderungen triggern
          var originalSetCookie = document.cookie;
          setInterval(function(){
            if(document.cookie !== originalSetCookie){
              originalSetCookie = document.cookie;
              triggerTaxCalculation();
            }
          }, 1000);
          
          // Purchase Order Feld permanent readonly machen
          function setPOFieldReadonly(poInput) {
            if(poInput) {
              poInput.readOnly = true;
              poInput.disabled = false; // disabled = true würde das Feld grau machen, aber wir wollen es nur readonly
              poInput.style.backgroundColor = '#f8f9fa';
              poInput.style.cursor = 'not-allowed';
              poInput.style.color = '#6c757d';
              
              // Zusätzliche Sicherheit: Event-Listener entfernen
              poInput.onclick = function(e) { e.preventDefault(); return false; };
              poInput.onkeydown = function(e) { e.preventDefault(); return false; };
              poInput.onkeyup = function(e) { e.preventDefault(); return false; };
              poInput.onkeypress = function(e) { e.preventDefault(); return false; };
              poInput.oninput = function(e) { e.preventDefault(); return false; };
              poInput.onpaste = function(e) { e.preventDefault(); return false; };
            }
          }
          
          // Automatische Bestellnummer für Purchase Order generieren
          function generatePurchaseOrderNumber(){
            var poInput = document.getElementById('purchase_order');
            if(poInput){
              // Prüfe ob bereits eine Bestellnummer im Session Storage gespeichert ist
              var storedPONumber = sessionStorage.getItem('ukc_po_number');
              
              if(storedPONumber) {
                // Verwende gespeicherte Bestellnummer
                poInput.value = storedPONumber;
                setPOFieldReadonly(poInput);
              } else if(!poInput.value) {
                // Generiere neue Bestellnummer nur wenn keine vorhanden ist
                var now = new Date();
                var year = now.getFullYear();
                var month = String(now.getMonth() + 1).padStart(2, '0');
                var day = String(now.getDate()).padStart(2, '0');
                var hours = String(now.getHours()).padStart(2, '0');
                var minutes = String(now.getMinutes()).padStart(2, '0');
                var seconds = String(now.getSeconds()).padStart(2, '0');
                var random = String(Math.floor(Math.random() * 10000)).padStart(4, '0');
                
                // Prüfen ob Nutzer eingeloggt ist und PBI-Attribut hat
                var customerId = document.querySelector('#customer_id')?.value;
                var isLoggedIn = customerId && customerId !== '0';
                var pbiValue = null;
                
                // Versuche PBI-Wert aus Custom Attributes zu holen (nur für eingeloggte Nutzer)
                if(isLoggedIn) {
                  try {
                    // Prüfe ob Foxy-Daten verfügbar sind
                    if(typeof FC !== 'undefined' && FC.cart && FC.cart.customer && FC.cart.customer.attributes) {
                      var attributes = FC.cart.customer.attributes;
                      for(var i = 0; i < attributes.length; i++) {
                        if(attributes[i].name === 'PBI') {
                          pbiValue = attributes[i].value;
                          break;
                        }
                      }
                    }
                  } catch(e) {
                    console.log('PBI-Attribut nicht gefunden');
                  }
                }
                
                var poNumber;
                if(isLoggedIn && pbiValue) {
                  // Für eingeloggte Nutzer MIT PBI-Attribut: PBI-WERT-YYYYMMDD-HHMMSS-XXXX Format
                  poNumber = 'PBI-' + pbiValue + '-' + year + month + day + '-' + hours + minutes + seconds + '-' + random;
                } else {
                  // Für alle anderen (Gäste und eingeloggte Nutzer ohne PBI): Standard UKC-Format
                  poNumber = 'UKC-' + year + month + day + '-' + hours + minutes + seconds + '-' + random;
                }
                
                // Speichere Bestellnummer im Session Storage
                sessionStorage.setItem('ukc_po_number', poNumber);
                
                poInput.value = poNumber;
                setPOFieldReadonly(poInput);
              }
            }
          }
          
          // Bestellnummer beim Laden generieren
          generatePurchaseOrderNumber();
          
          // Bestellnummer auch bei Payment-Method-Wechsel generieren
          document.addEventListener('change', function(ev){
            if(ev.target && ev.target.name === 'fc_payment_method' && ev.target.value === 'purchase_order'){
              setTimeout(generatePurchaseOrderNumber, 100);
            }
          });
          
          // Direkter Event-Listener für Versandmethoden-Änderungen
          document.addEventListener('change', function(ev){
            // Prüfe ob es ein Versandmethoden-Radio-Button ist
            if(ev.target && ev.target.type === 'radio' && ev.target.name && ev.target.name.includes('shipping')) {
              setTimeout(function(){
                var allPOInputs = document.querySelectorAll('#purchase_order');
                allPOInputs.forEach(function(input) {
                  var storedPONumber = sessionStorage.getItem('ukc_po_number');
                  if(storedPONumber) {
                    input.value = storedPONumber;
                    setPOFieldReadonly(input);
                  }
                });
              }, 200);
            }
          });
          
          // Zusätzlicher Event-Listener für alle Klicks auf Versandoptionen
          document.addEventListener('click', function(ev){
            // Prüfe ob auf eine Versandoption geklickt wurde
            if(ev.target && (ev.target.closest('.fc-shipping-rates__rate') || ev.target.closest('[data-fc-id="shipping-results"]'))) {
              setTimeout(function(){
                var allPOInputs = document.querySelectorAll('#purchase_order');
                allPOInputs.forEach(function(input) {
                  var storedPONumber = sessionStorage.getItem('ukc_po_number');
                  if(storedPONumber) {
                    input.value = storedPONumber;
                    setPOFieldReadonly(input);
                  }
                });
              }, 300);
            }
          });
          
          // MutationObserver für Purchase Order Feld - überwacht Änderungen am DOM
          function setupPOFieldObserver() {
            var poInput = document.getElementById('purchase_order');
            if(poInput) {
              // Observer für das spezifische Feld
              var observer = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                  if(mutation.type === 'attributes' && mutation.attributeName === 'readonly') {
                    // Falls readonly-Attribut entfernt wurde, wieder hinzufügen
                    if(!poInput.readOnly) {
                      setPOFieldReadonly(poInput);
                    }
                  }
                });
              });
              
              // Beobachte Änderungen an Attributen
              observer.observe(poInput, { 
                attributes: true, 
                attributeFilter: ['readonly', 'disabled', 'style'] 
              });
              
              // Zusätzlicher Observer für das gesamte Dokument (falls Feld neu erstellt wird)
              var docObserver = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                  if(mutation.type === 'childList') {
                    mutation.addedNodes.forEach(function(node) {
                      if(node.nodeType === 1) { // Element node
                        var newPOInput = node.querySelector ? node.querySelector('#purchase_order') : null;
                        if(newPOInput || node.id === 'purchase_order') {
                          var targetInput = newPOInput || node;
                          setTimeout(function() {
                            var storedPONumber = sessionStorage.getItem('ukc_po_number');
                            if(storedPONumber) {
                              targetInput.value = storedPONumber;
                              setPOFieldReadonly(targetInput);
                            }
                          }, 50);
                        }
                      }
                    });
                  }
                });
              });
              
              // Beobachte das gesamte Dokument
              docObserver.observe(document.body, { 
                childList: true, 
                subtree: true 
              });
            }
          }
          
          // Observer nach kurzer Verzögerung einrichten
          setTimeout(setupPOFieldObserver, 500);
          
          // Kontinuierlicher Check alle 2 Sekunden
          setInterval(function(){
            var allPOInputs = document.querySelectorAll('#purchase_order');
            allPOInputs.forEach(function(input) {
              var storedPONumber = sessionStorage.getItem('ukc_po_number');
              if(storedPONumber && (input.value !== storedPONumber || !input.readOnly)) {
                input.value = storedPONumber;
                setPOFieldReadonly(input);
              }
            });
          }, 2000);
          
          document.addEventListener('click', function(ev){
            var btn = ev.target.closest('.ukc-qty-btn');
            if(btn){
              ev.preventDefault();
              var id = btn.getAttribute('data-fc-item-id');
              var input = findQtyInput(id);
              if(!input) return;
              var current = parseInt(input.value || '1', 10) || 1;
              if(btn.classList.contains('ukc-qty-minus')){
                current = Math.max(1, current - 1);
              }else{
                current = current + 1;
              }
              input.value = current;
              recalcSummary();
              ajaxUpdate();
            }
            var rm = ev.target.closest('.ukc-remove-btn');
            if(rm){
              ev.preventDefault();
              var idr = rm.getAttribute('data-fc-item-id');
              var inp = findQtyInput(idr);
              if(inp){ inp.value = 0; }
              recalcSummary();
              ajaxUpdate();
            }
          }, false);

          // Versand neu laden, wenn im CHECKOUT die Adresse per "Adresse suchen" gesetzt wird
          function triggerShippingRefresh(){
            try{
              var isCheckout = document.querySelector('#fc-cart')?.getAttribute('data-context') === 'checkout';
              if(!isCheckout) return;
              if(window.FC && FC.checkout && FC.checkout.shipping && typeof FC.checkout.shipping.get_shipping_and_handling === 'function'){
                FC.checkout.shipping.get_shipping_and_handling();
              } else {
                ['shipping_country','shipping_postal_code','shipping_city'].forEach(function(name){
                  var el = document.querySelector('[name="'+name+'"]');
                  if(el){ el.dispatchEvent(new Event('change', { bubbles:true })); }
                });
              }
            }catch(_){/* noop */}
          }
          // Button "Adresse suchen"
          document.addEventListener('click', function(e){
            if(e.target.closest('.fc-postal-code-entry__submit .fc-button')){
              setTimeout(triggerShippingRefresh, 300);
            }
          });
          // Autocomplete Auswahl-Event
          document.addEventListener('awesomecomplete:select', function(){ setTimeout(triggerShippingRefresh, 200); });
          // Direkte Änderungen an Land/PLZ/Ort
          ['shipping_country','shipping_postal_code','shipping_city'].forEach(function(name){
            var el = document.querySelector('[name="'+name+'"]');
            if(el){ el.addEventListener('change', function(){ setTimeout(triggerShippingRefresh, 100); }); }
          });

          // Wenn Versand-Raten geladen sind, automatisch erste Option wählen (falls keine gewählt)
          function autoSelectFirstShipping(){
            var isCheckout = document.querySelector('#fc-cart')?.getAttribute('data-context') === 'checkout';
            if(!isCheckout) return;
            var container = document.querySelector('[data-fc-id="shipping-results"]');
            if(!container) return;
            var chosen = container.querySelector('input[name="shipping_service_id"]:checked');
            var first = container.querySelector('input[name="shipping_service_id"]');
            if(!chosen && first){
              first.checked = true;
              first.dispatchEvent(new Event('change', { bubbles:true }));
            }
          }
          // Beobachte Änderungen im Versandbereich
          var shipSection = document.querySelector('[data-fc-id="block-shipping-results"]');
          if(shipSection){
            var mo = new MutationObserver(function(){ setTimeout(autoSelectFirstShipping, 50); });
            mo.observe(shipSection, { childList:true, subtree:true });
          }
          // Sicherheitsnetz nach manueller Aktualisierung
          document.addEventListener('click', function(e){
            if(e.target.closest('[data-fc-id="shipping-results"]')){
              setTimeout(autoSelectFirstShipping, 50);
            }
          });
        })();
        </script>
        </form>
        {% endif %}
        {% endblock cart_form_end %}
    </div>{# .fc-cart-container #}

    {% endif %} {# not is_updateinfo #}

</div>{# #fc-cart-responsive / #fc-cart-non-responsive #}

</div><!-- data-fc-container="cart" -->
{% endblock %}{# cart #}
{# ===================================================== #}
    </div>
  </div>
</div>
